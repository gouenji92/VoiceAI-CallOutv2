import os
import time
from supabase import create_client, Client
from datetime import datetime, timezone

# --- 1. PH·∫¶N KH·ªûI T·∫†O ---
SUPABASE_URL = "https://vmffnryqvntucusjqhoy.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtZmZucnlxdm50dWN1c2pxaG95Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA1MTE2MDYsImV4cCI6MjA3NjA4NzYwNn0.uy11_QL1WiS1yg5RRqKOZBgz6vh1yFqM8iwmYYAYdw8"

# üõë ƒêI·ªÄN ID WORKFLOW TH·∫¨T C·ª¶A B·∫†N (ƒê√£ l·∫•y t·ª´ DB)
MY_WORKFLOW_ID = "caf4e4e1-b093-4275-997a-ab2769f58ce7" # V√ç D·ª§: "f47ac10b-58cc-4372-a567-0e02b2c3d479"

try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ [PYTHON] Kh·ªüi t·∫°o Supabase client th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ùå [PYTHON] L·ªói khi kh·ªüi t·∫°o Supabase: {e}")
    exit()

# --- 2. C√ÅC H√ÄM T∆Ø∆†NG T√ÅC API ---

def create_new_call(workflow_id: str, customer_phone: str):
    print("üìû [PYTHON] ƒêang t·∫°o cu·ªôc g·ªçi...")
    try:
        response = supabase.table('calls').insert({
            'workflow_id': workflow_id,
            'customer_phone': customer_phone,
            'status': 'active',
            'start_time': datetime.now(timezone.utc).isoformat()
        }).execute()
        call_data = response.data[0]
        print(f"üìû [PYTHON] T·∫°o cu·ªôc g·ªçi th√†nh c√¥ng, ID: {call_data['id']}")
        return call_data
    except Exception as e:
        print(f"‚ùå [PYTHON] L·ªói khi t·∫°o cu·ªôc g·ªçi: {e}")
        return None

def add_conversation_log(call_id: str, speaker: str, text: str, intent: str = None, confidence: float = None):
    print(f"üí¨ [PYTHON] ƒêang th√™m log [{speaker}]: {text}")
    supabase.table('conversation_logs').insert({
        'call_id': call_id, 'speaker': speaker, 'text': text,
        'intent': intent, 'confidence': confidence
    }).execute()

def end_call(call_id: str, last_intent: str):
    print(f"üèÅ [PYTHON] ƒêang k·∫øt th√∫c cu·ªôc g·ªçi: {call_id}")
    try:
        # 1. L·∫•y start_time
        call_response = supabase.table('calls').select('start_time').eq('id', call_id).single().execute()
        if not call_response.data:
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y cu·ªôc g·ªçi ƒë·ªÉ k·∫øt th√∫c.")
            return

        # 2. S·ª≠a l·ªói Datetime: Chuy·ªÉn ƒë·ªïi naive datetime t·ª´ DB sang aware
        start_time_str = call_response.data['start_time']
        start_time_naive = datetime.fromisoformat(start_time_str)
        start_time = start_time_naive.replace(tzinfo=timezone.utc)
        
        # 3. L·∫•y end_time (ƒë√£ l√† aware)
        end_time = datetime.now(timezone.utc)
        
        # 4. T√≠nh to√°n
        duration_in_seconds = (end_time - start_time).total_seconds()
        
        # 5. C·∫≠p nh·∫≠t
        supabase.table('calls').update({
            'status': 'completed',
            'end_time': end_time.isoformat(),
            'last_intent': last_intent,
            'duration': duration_in_seconds
        }).eq('id', call_id).execute()
        print("üèÅ [PYTHON] K·∫øt th√∫c cu·ªôc g·ªçi th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå [PYTHON] Ngo·∫°i l·ªá khi k·∫øt th√∫c cu·ªôc g·ªçi: {e}")

# --- 3. H√ÄM MAIN ƒê·ªÇ CH·∫†Y ---
if __name__ == "__main__":
    
    if MY_WORKFLOW_ID == "...":
        print("‚ùå L·ªñI: Vui l√≤ng c·∫≠p nh·∫≠t bi·∫øn 'MY_WORKFLOW_ID' (d√≤ng 10) b·∫±ng ID workflow c·ªßa b·∫°n.")
    else:
        call_data = create_new_call(MY_WORKFLOW_ID, "0909111222")
        
        if call_data:
            call_id = call_data['id']
            print("ü§ñ [PYTHON] B·∫Øt ƒë·∫ßu gi·∫£ l·∫≠p cu·ªôc g·ªçi sau 3 gi√¢y...")
            time.sleep(3) # Ch·ªù 3 gi√¢y ƒë·ªÉ b·∫°n k·ªãp nh√¨n
            
            add_conversation_log(call_id, 'bot', 'Xin ch√†o, ƒë√¢y l√† t·ªïng ƒë√†i AI.', None, None)
            time.sleep(2) # Ch·ªù 2 gi√¢y
            
            add_conversation_log(call_id, 'user', 'T√¥i mu·ªën ƒë·∫∑t l·ªãch.', 'dat_lich', 0.95)
            time.sleep(2)
            
            add_conversation_log(call_id, 'bot', 'V√¢ng, b·∫°n mu·ªën ƒë·∫∑t l·ªãch khi n√†o?', None, None)
            time.sleep(2)
            
            add_conversation_log(call_id, 'user', '9h s√°ng mai.', 'cung_cap_thoi_gian', 0.98)
            time.sleep(1)
            
            end_call(call_id, 'cung_cap_thoi_gian')
            print("\nüéâ === TEST API (PYTHON) HO√ÄN T·∫§T ===")
        else:
            print("‚ùå [PYTHON] Kh√¥ng th·ªÉ t·∫°o cu·ªôc g·ªçi, d·ª´ng test.")