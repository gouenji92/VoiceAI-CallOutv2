"""
HTTP-based Deeppavlov Agent Server
Thay th·∫ø ZMQ channel b·∫±ng FastAPI ƒë·ªÉ d·ªÖ t√≠ch h·ª£p
"""
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Dict, Any
import uvicorn

app = FastAPI(title="Deeppavlov Agent Server", version="1.0")

class AgentRequest(BaseModel):
    user_id: str
    state: Dict[str, Any]

class AgentResponse(BaseModel):
    response: str
    action: str = None

@app.post("/", response_model=AgentResponse)
async def process_dialog(request: AgentRequest):
    """
    Nh·∫≠n state t·ª´ Dialog Manager, x·ª≠ l√Ω v√† tr·∫£ v·ªÅ response
    """
    state = request.state
    workflow_json = state.get("workflow_json", {})
    nlp_data = state.get("nlp_data", {})
    
    user_input = nlp_data.get("text", "")
    intent = nlp_data.get("intent", "unknown")
    intent_confidence = nlp_data.get("intent_confidence", 0.0)
    sentiment = nlp_data.get("sentiment", "neutral")
    entities = nlp_data.get("entities", {})

    print(f"\n[Agent] Nh·∫≠n request:")
    print(f"  - User: {request.user_id}")
    print(f"  - Text: {user_input}")
    print(f"  - Intent: {intent} (confidence: {intent_confidence:.2f})")
    print(f"  - Sentiment: {sentiment}")
    print(f"  - Entities: {entities}")

    # --- LOGIC ƒê·ªäNH TUY·∫æN D·ª∞A TR√äN INTENT ---
    confidence_threshold = 0.6

    # 1. X·ª≠ l√Ω sentiment ti√™u c·ª±c
    if sentiment == "negative":
        return AgentResponse(
            response="T√¥i xin l·ªói n·∫øu c√≥ tr·∫£i nghi·ªám kh√¥ng t·ªët. B·∫°n c√≥ mu·ªën k·∫øt n·ªëi v·ªõi nh√¢n vi√™n kh√¥ng?",
            action="transfer"
        )

    # 2. X·ª≠ l√Ω c√°c intent ch√≠nh
    if intent == "dat_lich":
        if intent_confidence >= confidence_threshold:
            if "time" in entities and entities["time"]:
                time_val = entities["time"]
                return AgentResponse(
                    response=f"V√¢ng, t√¥i s·∫Ω gi√∫p b·∫°n ƒë·∫∑t l·ªãch v√†o l√∫c {time_val}. B·∫°n x√°c nh·∫≠n nh√©?"
                )
            else:
                return AgentResponse(
                    response="V√¢ng. B·∫°n mu·ªën ƒë·∫∑t l·ªãch v√†o th·ªùi gian n√†o ·∫°?"
                )
        else:
            return AgentResponse(
                response="T√¥i hi·ªÉu b·∫°n mu·ªën ƒë·∫∑t l·ªãch. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ th·ªùi gian ƒë∆∞·ª£c kh√¥ng?"
            )

    elif intent == "hoi_thong_tin":
        print("[Agent] ƒêang x·ª≠ l√Ω truy v·∫•n th√¥ng tin...")
        if intent_confidence >= confidence_threshold:
            return AgentResponse(
                response=f"T√¥i ƒë√£ t√¨m th·∫•y th√¥ng tin li√™n quan ƒë·∫øn: {user_input}. B·∫°n c·∫ßn bi·∫øt th√™m g√¨ kh√¥ng?"
            )
        else:
            return AgentResponse(
                response="B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ h∆°n v·ªÅ th√¥ng tin b·∫°n c·∫ßn t√¨m hi·ªÉu ƒë∆∞·ª£c kh√¥ng?"
            )

    elif intent == "tam_biet" or intent == "ket_thuc":
        if intent_confidence >= confidence_threshold:
            return AgentResponse(
                response="C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!",
                action="hangup"
            )
        else:
            return AgentResponse(
                response="B·∫°n mu·ªën k·∫øt th√∫c cu·ªôc g·ªçi ph·∫£i kh√¥ng ·∫°? C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá.",
                action="hangup"
            )
    
    elif intent == "chao_hoi":
        return AgentResponse(
            response="Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"
        )

    # 3. Intent kh√¥ng x√°c ƒë·ªãnh ho·∫∑c confidence th·∫•p
    else:
        if intent_confidence < confidence_threshold:
            return AgentResponse(
                response="T√¥i kh√¥ng ch·∫Øc ch·∫Øn l·∫Øm v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch th√™m ƒë∆∞·ª£c kh√¥ng?"
            )
        else:
            return AgentResponse(
                response="Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ √Ω c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?"
            )

@app.get("/health")
async def health_check():
    return {"status": "ok", "message": "Agent server is running"}

if __name__ == "__main__":
    print("=" * 60)
    print("  ü§ñ DEEPPAVLOV AGENT SERVER (HTTP)")
    print("  Running on: http://localhost:4242")
    print("  Press CTRL+C to stop")
    print("=" * 60)
    uvicorn.run(app, host="0.0.0.0", port=4242, log_level="info")
